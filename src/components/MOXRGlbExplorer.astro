---
---
<div class="container">
    <div class="row" id="explorer-grid"></div>
    <div id="load-more-container" style="text-align: center; padding: 20px;"></div>
</div>

<script>
    let allFiles = [];
    let baseUrl = '';
    let thumbnailExtension = '';
    let currentIndex = 0;

    const isMobile = window.innerWidth < 768;
    const initialLoadCount = isMobile ? 3 : 10;
    const loadMoreCount = 5;

    function formatFile(file) {
        const filename = file.filename;
        const parts = filename.split('_');
        const datePart = parts[1] || '';
        const timePart = parts[2] || '';
        const creatorPart = parts[3] || '';

        const year = datePart.substring(0, 4);
        const month = datePart.substring(4, 6);
        const day = datePart.substring(6, 8);

        const hour = timePart.substring(0, 2);
        const minute = timePart.substring(2, 4);

        const creator = creatorPart.replace('.glb', ' ').replaceAll('-', ' ');
        const formattedDateTime = datePart && timePart ? `${day}.${month}.${year} ${hour}:${minute}` : 'N/A';

        let daysAgo = '';
        if (datePart) {
            const fileDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
            const today = new Date();
            fileDate.setHours(0, 0, 0, 0);
            today.setHours(0, 0, 0, 0);

            const diffTime = today.getTime() - fileDate.getTime();
            const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));

            if (diffDays === 0) daysAgo = 'today';
            else if (diffDays === 1) daysAgo = 'yesterday';
            else if (diffDays === 2) daysAgo = 'the day before yesterday';
            else if (diffDays < 7) daysAgo = `${diffDays} days ago`;
            else if (diffDays < 30) daysAgo = `${Math.floor(diffDays / 7)} weeks ago`;
            else if (diffDays < 365) daysAgo = `${Math.floor(diffDays / 30)} months ago`;
            else if (diffDays >= 365) daysAgo = `${Math.floor(diffDays / 365)} years ago`;
        }

        const thumbnailUrl = `${baseUrl}${filename.replace('.glb', thumbnailExtension)}`;
        const fileUrl = `${baseUrl}${filename}`;
        return {filename, creator, formattedDateTime, daysAgo, thumbnailUrl, fileUrl};
    }

    function appendFiles(filesToAppend) {
        const grid = document.getElementById("explorer-grid");
        filesToAppend.forEach(file => {
            const {filename, creator, formattedDateTime, daysAgo, thumbnailUrl, fileUrl} =
                formatFile(file);

            const col = document.createElement("div");
            col.className = "col";
            col.innerHTML = `
      <div class="card h-100">
        <img src="${thumbnailUrl}" class="card-img-top" alt="Thumbnail for ${filename}" draggable="false" style="user-select: none; -webkit-user-drag: none;" loading="lazy" />
        <div class="card-body">
          <p class="card-title" title="${filename}">3D-Sketch from ${daysAgo}</p>
          <p class="card-text">${creator}</p>
        </div>
        <div class="btn-group" role="group">
          <a href="https://j0nesyes.github.io/moxr-glb-viewer/?file=${filename}" class="btn btn-secondary" target="_blank" rel="noopener noreferrer">View in 3D</a>
          <a href="${fileUrl}" class="btn" target="_blank" rel="noopener noreferrer">Download</a>
        </div>
      </div>
    `;
            grid.appendChild(col);
        });
    }

    function loadMoreFiles() {
        const filesToLoad = allFiles.slice(currentIndex, currentIndex + loadMoreCount);
        appendFiles(filesToLoad);
        currentIndex += filesToLoad.length;
        updateLoadMoreButton();
    }

    function updateLoadMoreButton() {
        const container = document.getElementById('load-more-container');
        container.innerHTML = ''; // Clear existing button

        if (!isMobile && currentIndex < allFiles.length) {
            const button = document.createElement('button');
            button.textContent = 'Load more';
            button.className = 'btn-load-more';
            button.addEventListener('click', loadMoreFiles);
            container.appendChild(button);
        }
    }

    async function loadExplorer() {
        try {
            const res = await fetch("https://00224466.xyz/MOXR/MOXRGlbExplorer.json", {cache: "no-store"});
            if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
            const data = await res.json();

            baseUrl = data.baseUrl;
            thumbnailExtension = data.thumbnailExtension;

            // Sort files so newest are displayed first
            data.files.sort((a, b) => {
                const partsA = a.filename.split('_');
                const partsB = b.filename.split('_');

                const datePartA = partsA[1];
                const timePartA = partsA[2];
                const dateA = new Date(
                    parseInt(datePartA.substring(0,4)),
                    parseInt(datePartA.substring(4,6)) - 1,
                    parseInt(datePartA.substring(6,8)),
                    parseInt(timePartA.substring(0,2)),
                    parseInt(timePartA.substring(2,4)),
                    parseInt(timePartA.substring(4,6))
                );

                const datePartB = partsB[1];
                const timePartB = partsB[2];
                const dateB = new Date(
                    parseInt(datePartB.substring(0,4)),
                    parseInt(datePartB.substring(4,6)) - 1,
                    parseInt(datePartB.substring(6,8)),
                    parseInt(timePartB.substring(0,2)),
                    parseInt(timePartB.substring(2,4)),
                    parseInt(timePartB.substring(4,6))
                );

                return dateB - dateA; // newest first
            });

            allFiles = data.files;
            const filesToLoad = allFiles.slice(currentIndex, currentIndex + initialLoadCount);
            appendFiles(filesToLoad);
            currentIndex += filesToLoad.length;
            updateLoadMoreButton();

        } catch (err) {
            console.error(err);
            document.getElementById("explorer-grid").innerHTML = "<p>Fehler beim Laden der Zeichnungen.</p>";
        }
    }

    loadExplorer();
</script>

<style is:global>
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    }

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    }

.col {
    max-width: 100%;
    }

.card {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    font-family: Inter, sans-serif;
    }

.card-img-top {
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
    object-fit: cover;
    height: 200px;
    }

.card-body{
    flex-grow: 1;
    padding: 0 1rem;
    }

.card-title {
    margin: 0.8rem 0 0.25rem 0;
    font-weight: bold;
    font-size: 0.8rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    }

.card-text {
    color: #666;
    margin: 0.25rem 0 0.5rem 0;
    font-size: 0.8rem;
    }

.btn-group {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    }

.btn {
    text-decoration: none;
    text-align: center;
    border-radius: 0;
    margin: 0.25rem 0;
    font-family: Inter, sans-serif;

    }

.btn:first-child {
    margin-left: 0.25rem;
    background-color: #0e0e0e;
    color: white;
    padding: 0.5rem 0;
    border-bottom-left-radius: 0.563rem;
    border-top-left-radius: 0.563rem;
    font-weight: 500;
    }

.btn:last-child {
    margin-right: 0.25rem;
    background-color: #efefef;
    color: #0e0e0e;
    padding: 0.5rem;
    text-decoration: none;
    text-align: center;
    border-bottom-right-radius: 0.563rem;
    border-top-right-radius: 0.563rem;
    font-weight: 400;
    }
.btn-load-more {
    background-color: #0e0e0e;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    cursor: pointer;
    border: none;
    font-family: Inter, sans-serif;
    margin-top: 20px;
}

@media (max-width: 768px) {
    .col {
        max-width: 80vw;
        flex: 0 0 80vw;
    }
}
</style>