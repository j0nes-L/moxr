---
import ArrowDownAnim from "./ArrowDownAnim.astro";
import {urls} from "../config";

interface Props {
    heading: string;
    subheading: string;
    primaryButtonText: string;
    primaryButtonHref: string;
    secondaryButtonText: string;
    secondaryButtonHref: string;
}

const {
    heading,
    subheading,
    primaryButtonText,
    primaryButtonHref,
    secondaryButtonText,
    secondaryButtonHref
} = Astro.props;
---
<div style="position: relative; width: 100%; height: 100vh; overflow: hidden;">
    <canvas id="hero-Canvas"></canvas>
    <div id="hero-Logo-Wrapper">
        <a href={urls.moxr}>
            <img id="hero-Logo" src="../moxr/assets/favicon.svg" alt="Logo Mind-Objects" draggable="false"/>
        </a>
    </div>
    <div class="hero-Text-Container">
        <h1>{heading}</h1>
        <h2>{subheading}</h2>
    </div>
    <div id="hero-Button-Wrapper">
        <a class="btn btn-Primary" id="hero-Button" href={primaryButtonHref} target="_blank">
            <span id="hero-Button-Text">{primaryButtonText}</span>
        </a>
        <a class="btn btn-Secondary" id="hero-Button" href={secondaryButtonHref}>
            <span id="hero-Button-Text">{secondaryButtonText}</span>
        </a>
    </div>
    <div class="down-arrow hide-on-mobile">
        <ArrowDownAnim/>
    </div>
</div>
<div class="hero-Spacer"></div>

<script>
    const canvas = document.getElementById('hero-Canvas');
    let drawing = false;
    let lastX = 0;
    let lastY = 0;
    const drawColor = '#d60000';

    const buttonWrapper = document.querySelector('#hero-Button-Wrapper');
    const heroLogoWrapper = document.querySelector('#hero-Logo-Wrapper');

    function fadeOutButton() {
        buttonWrapper.classList.add('button-disabled');
        heroLogoWrapper.classList.add('button-disabled');
    }

    function fadeInButton() {
        buttonWrapper.classList.remove('button-disabled');
        heroLogoWrapper.classList.remove('button-disabled');
    }

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }

    canvas.addEventListener('mousedown', (event) => {
        drawing = true;
        points.length = 0; // Reset points array on new stroke
        [lastX, lastY] = [event.offsetX, event.offsetY];
        fadeOutButton();
        setTimeout(() => {
            if (!drawing) {
                fadeInButton();
            }
        }, 500);
    });

    canvas.addEventListener('mouseup', () => {
        drawing = false;
        fadeInButton();
    });

    canvas.addEventListener('mouseout', () => {
        drawing = false;
        fadeInButton();
    });

    const points = [];
    canvas.addEventListener('mousemove', (e) => {
        if (drawing) {
            fadeOutButton();

            const ctx = canvas.getContext('2d');
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';

            const point = {x: e.offsetX, y: e.offsetY};
            points.push(point);

            if (points.length < 3) {
                const b = points[0];
                ctx.beginPath();
                ctx.arc(b.x, b.y, ctx.lineWidth / 2, 0, Math.PI * 2, !0);
                ctx.fillStyle = drawColor;
                ctx.fill();
                return;
            }

            ctx.beginPath();
            ctx.moveTo(points[0].x, points[0].y);

            for (let i = 1; i < points.length - 2; i++) {
                const c = (points[i].x + points[i + 1].x) / 2;
                const d = (points[i].y + points[i + 1].y) / 2;
                ctx.quadraticCurveTo(points[i].x, points[i].y, c, d);
            }

            ctx.strokeStyle = drawColor;
            ctx.lineWidth = 10;
            ctx.stroke();

            [lastX, lastY] = [e.offsetX, e.offsetY];
        } else {
            fadeInButton();
        }
    });

    // Initiales Resize
    resizeCanvas();

    // Resize-Event Listener
    window.addEventListener('resize', resizeCanvas);
</script>